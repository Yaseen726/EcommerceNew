<%-include("../partials/user/header.ejs")%>
<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<style>
  body {
    font-family: "Inter", system-ui, -apple-system, sans-serif;
    background-color: #f0f2f5;
    color: #1a1a1a;
    margin: 0;
    padding: 0;
    line-height: 1.6;
  }

  .checkout-container {
    max-width: 1000px;
    margin: 3rem auto;
    padding: 2rem;
    background-color: #ffffff;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
    border-radius: 16px;
  }

  /* Typography */
  h1 {
    text-align: center;
    margin-bottom: 2.5rem;
    font-size: 2.2rem;
    font-weight: 700;
    color: #1a1a1a;
    position: relative;
  }

  h1::after {
    content: "";
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 4px;
    background: linear-gradient(90deg, #3498db, #2ecc71);
    border-radius: 2px;
  }

  h2 {
    font-size: 1.5rem;
    color: #2c3e50;
    margin: 2rem 0 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid #eef2f7;
  }

  /* Address Section */
  .address-section {
    margin-bottom: 2.5rem;
  }

  .address-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    padding: 0;
    list-style: none;
    margin: 0;
  }

  .address-item {
    position: relative;
    border: 2px solid #e1e8ed;
    border-radius: 12px;
    padding: 1.5rem;
    padding-left: 3rem;
    background-color: #ffffff;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .address-radio {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  .address-radio + label {
    display: block;
    position: relative;
    padding-left: 15px;
    cursor: pointer;
    width: 100%;
  }

  .address-radio + label::before {
    content: "";
    position: absolute;
    left: -25px;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    border: 2px solid #3498db;
    border-radius: 50%;
    background-color: #fff;
    transition: all 0.3s ease;
  }

  .address-radio:checked + label::after {
    content: "";
    position: absolute;
    left: -21px;
    top: 50%;
    transform: translateY(-50%);
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #3498db;
  }

  .address-radio:checked ~ .address-item {
    border-color: #3498db;
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.1);
  }

  .address-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  }

  .address-item p {
    margin: 0.5rem 0;
    color: #4a5568;
  }

  .address-item strong {
    color: #2d3748;
    font-weight: 600;
  }

  /* Product Section */
  .product-section {
    margin-bottom: 2.5rem;
  }

  .product-item {
    padding: 1.5rem;
    border: 1px solid #e1e8ed;
    border-radius: 12px;
    background-color: #ffffff;
    transition: all 0.3s ease;
  }

  .product-item:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  }

  .product-item p {
    margin: 0.5rem 0;
    color: #4a5568;
  }

  .product-item strong {
    color: #2d3748;
    font-weight: 600;
  }

  /* Cart Section */
  .cart-section {
    margin-bottom: 2.5rem;
  }

  .cart-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin: 1.5rem 0;
  }

  .cart-table th,
  .cart-table td {
    padding: 1rem;
    text-align: left;
    border: none;
  }

  .cart-table th {
    background-color: #f8fafc;
    color: #2d3748;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.875rem;
    letter-spacing: 0.05em;
  }

  .cart-table tr {
    transition: all 0.3s ease;
  }

  .cart-table tbody tr:hover {
    background-color: #f8fafc;
  }

  .cart-table td {
    border-top: 1px solid #e1e8ed;
    color: #4a5568;
  }

  /* Coupon Section */
  .coupon-section {
    margin-bottom: 2.5rem;
  }

  .coupon-form {
    display: flex;
    gap: 1rem;
    align-items: flex-end;
  }

  .coupon-form .form-group {
    flex: 1;
    margin-bottom: 0;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #2d3748;
    font-weight: 500;
  }

  input[type="text"] {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid #e1e8ed;
    border-radius: 8px;
    font-size: 1rem;
    transition: all 0.3s ease;
    background-color: #ffffff;
  }

  input[type="text"]:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
  }

  /* Payment Method Section */
  .payment-method-section {
    margin-bottom: 2.5rem;
  }

  .payment-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin: 1.5rem 0;
  }

  .payment-option {
    position: relative;
    display: flex;
    align-items: center;
    padding: 1rem 1.5rem;
    background-color: #f8fafc;
    border: 2px solid #e1e8ed;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .payment-option:hover {
    background-color: #fff;
    border-color: #3498db;
  }

  .payment-radio {
    position: relative;
    width: 20px;
    height: 20px;
    margin-right: 1rem;
  }

  .payment-radio input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  .payment-radio .radio-custom {
    position: absolute;
    top: 0;
    left: 0;
    width: 20px;
    height: 20px;
    background-color: #fff;
    border: 2px solid #3498db;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .payment-radio input:checked ~ .radio-custom::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #3498db;
  }

  .payment-label {
    color: #4a5568;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .payment-option input:checked ~ .payment-label {
    color: #2d3748;
    font-weight: 600;
  }

  .payment-option:has(input:checked) {
    border-color: #3498db;
    background-color: #fff;
    box-shadow: 0 4px 15px rgba(52, 152, 219, 0.1);
  }

  /* Total Price Section */
  .total-price-section {
    background: linear-gradient(135deg, #f6f9fc, #ffffff);
    padding: 2rem;
    border-radius: 12px;
    text-align: right;
    margin-top: 2rem;
  }

  .total-price-section h2 {
    color: #2d3748;
    border: none;
    margin: 0;
    font-size: 1.8rem;
  }

  /* Buttons */
  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    color: #ffffff;
    background: linear-gradient(90deg, #3498db, #2ecc71);
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    text-align: center;
  }

  .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(46, 204, 113, 0.2);
  }

  .btn-primary {
    background: linear-gradient(90deg, #2ecc71, #27ae60);
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .checkout-container {
      margin: 1rem;
      padding: 1.5rem;
    }

    .coupon-form {
      flex-direction: column;
      gap: 1rem;
    }

    .cart-table {
      display: block;
      overflow-x: auto;
      white-space: nowrap;
    }

    .payment-options {
      gap: 0.75rem;
    }

    .payment-option {
      padding: 0.75rem 1rem;
    }

    h1 {
      font-size: 1.8rem;
    }

    h2 {
      font-size: 1.3rem;
    }
  }

  /* Error States */
  .error {
    border-color: #e74c3c !important;
  }

  .error-message {
    color: #e74c3c;
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }

  /* Success States */
  .success {
    border-color: #2ecc71 !important;
  }

  .success-message {
    color: #2ecc71;
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }

  /* Loading States */
  .btn.loading {
    position: relative;
    color: transparent;
  }

  .btn.loading::after {
    content: "";
    position: absolute;
    width: 20px;
    height: 20px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 0.8s linear infinite;
  }

  @keyframes spin {
    to {
      transform: translate(-50%, -50%) rotate(360deg);
    }
  }
</style>
<body>
  <div class="checkout-container">
    <h1>Checkout</h1>

    <!-- Address Section -->
    <div class="address-section">
      <h2>Select Delivery Address</h2>
      <form id="checkoutForm">
        <% if (address.length > 0) { %> <% address.forEach((addr, index) => { %>
        <div class="form-check">
          <input type="radio" id="address<%= index %>" name="addressId"
          value="<%= addr._id %>" <%= index === 0 ? "checked" : "" %>
          class="form-check-input" />
          <label for="address<%= index %>" class="form-check-label">
            <strong><%= addr.addresstype %></strong><br />
            <%= addr.name %>, <%= addr.city %>, <%= addr.landmark %>, <%=
            addr.state %>, <%= addr.pincode %>
            <br />Phone: <%= addr.phone %>
          </label>
        </div>
        <% }) %> <% } else { %>
        <p>
          No addresses found. Please Add one
        </p>
        <% } %>
      </form>
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAddressModal">
        Add Address
      </button>
    </div>

    <!-- Add Address Modal -->
    <div
    class="modal fade"
    id="addAddressModal"
    tabindex="-1"
    aria-labelledby="addAddressModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="addAddressForm" method="POST" action="/checkout/addaddress">
          <div class="modal-header">
            <h5 class="modal-title" id="addAddressModalLabel">
              Add New Address
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div class="form-group">
              <label for="addresstype" class="form-label">Address Type</label>
              <input
                type="text"
                id="addresstype"
                name="addresstype"
                class="form-control"
                required
              />
              <small class="text-danger" id="addresstypeError"></small>
            </div>
            <div class="form-group">
              <label for="name" class="form-label">Name</label>
              <input
                type="text"
                id="name"
                name="name"
                class="form-control"
                required
              />
              <small class="text-danger" id="nameError"></small>
            </div>
            <div class="form-group">
              <label for="city" class="form-label">City</label>
              <input
                type="text"
                id="city"
                name="city"
                class="form-control"
                required
              />
              <small class="text-danger" id="cityError"></small>
            </div>
            <div class="form-group">
              <label for="landmark" class="form-label">Landmark</label>
              <input
                type="text"
                id="landmark"
                name="landmark"
                class="form-control"
                required
              />
              <small class="text-danger" id="landmarkError"></small>
            </div>
            <div class="form-group">
              <label for="state" class="form-label">State</label>
              <input
                type="text"
                id="state"
                name="state"
                class="form-control"
                required
              />
              <small class="text-danger" id="stateError"></small>
            </div>
            <div class="form-group">
              <label for="pincode" class="form-label">Pincode</label>
              <input
                type="text"
                id="pincode"
                name="pincode"
                class="form-control"
                required
              />
              <small class="text-danger" id="pincodeError"></small>
            </div>
            <div class="form-group">
              <label for="phone" class="form-label">Phone</label>
              <input
                type="text"
                id="phone"
                name="phone"
                class="form-control"
                required
              />
              <small class="text-danger" id="phoneError"></small>
            </div>
            <div class="form-group">
              <label for="altphone" class="form-label">Alternate Phone</label>
              <input
                type="text"
                id="altphone"
                name="altphone"
                class="form-control"
              />
              <small class="text-danger" id="altphoneError"></small>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
            <button type="submit" class="btn btn-primary">
              Save Address
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>


    <!-- Product Section -->
    <% if (product) { %>
    <div class="cart-section">
      <h2>Your Buy Now Product</h2>
      <table class="cart-table">
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><%= product.productName %></td>
            <td>1</td>
            <td>₹<%= product.salePrice %></td>
            <td>₹<%= product.salePrice %></td>
          </tr>
        </tbody>
      </table>
    </div>
    <% } %>

    <!-- Cart Section -->
    <% if (cart && cart.items.length > 0) { %>
    <div class="cart-section">
      <h2>Your Cart</h2>
      <table class="cart-table">
        <thead>
          <tr>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          <% cart.items.forEach((item) => { %>
          <tr>
            <td><%= item.productId.productName %></td>
            <td><%= item.quantity %></td>
            <td>₹<%= item.productId.salePrice %></td>
            <td>₹<%= item.totalPrice %></td>
          </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    <%}%>

    <!-- Coupon Code Section -->
    <div class="coupon-section">
      <h2>Apply Coupon</h2>
      <form
        id="applyCouponForm"
        action="/checkout/applyCoupon"
        method="POST"
        class="coupon-form"
      >
        <div class="form-group">
          <label for="coupon">Enter Coupon Code:</label>
          <input
            type="text"
            id="couponCode"
            name="couponCode"
            placeholder="Enter coupon code"
          />
        </div>
        <button type="submit" class="btn">Apply Coupon</button>
      </form>
      <p id="CouponMessage" style="color: #e74c3c"><%=couponMessage || ' '%></p>
    </div>

    <!-- Payment Method Section -->
    <div class="payment-method-section">
      <h2>Select Payment Method</h2>
      <div class="payment-options">
        <!-- Cash on Delivery Option -->
        <div class="payment-option">
          <input
            type="radio"
            id="cod"
            name="paymentMethod"
            value="cod"
            checked
            class="payment-radio"
          />
          <label for="cod" class="payment-label">Cash on Delivery</label>
        </div>

        <!-- Online Payment Option (Disabled) -->
        <div class="payment-option">
          <input
            type="radio"
            id="online"
            name="paymentMethod"
            value="razorpay"
            class="payment-radio"
          />
          <label for="online" class="payment-label"
            >Online Payment (razorpay)</label
          >
        </div>
      </div>
    </div>

    <!-- Total Price Section -->
    <div class="total-price-section">
      <h2>Total Price: ₹<%= totalPrice %></h2>
    </div>

    <!-- Proceed to Checkout Button -->
    <div class="place-order">
      <button type="button" class="btn btn-success" id="placeOrderBtn">
        Place Order
      </button>
    </div>
  </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script>
  
  // Function to update total price on applying coupon
  document
    .getElementById("applyCouponForm")
    .addEventListener("submit", async (e) => {
      e.preventDefault();
      console.log("Form submission prevented");

      const couponCode = document.querySelector(
        'input[name="couponCode"]'
      ).value;
      console.log("Coupon Code:", couponCode);

      // Get the total price displayed on the page
      const totalPriceElement = document.querySelector(
        ".total-price-section h2"
      );
      let totalPrice = parseFloat(
        totalPriceElement.innerText.replace("Total Price: ₹", "").trim()
      );
      console.log("Initial Total Price:", totalPrice);

      // If total price is null or invalid, show an error
      if (isNaN(totalPrice)) {
        await Swal.fire({
          icon: "error",
          title: "Error",
          text: "Total price is not valid. Please check your cart.",
        });
        return;
      }

      // Send the coupon code and total price to the backend for validation
      const response = await fetch("/checkout/applyCoupon", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ couponCode, totalPrice }),
      });
      console.log("Coupon response:", response);

      const result = await response.json();
      console.log("Coupon result:", result);

      const CouponMessage = document.getElementById("CouponMessage");
      CouponMessage.innerText = result.message;

      // If coupon is applied successfully, update the total price
      if (result.success) {
        totalPrice = result.newTotalPrice;
        totalPriceElement.innerText = `Total Price: ₹${totalPrice.toFixed(2)}`;
        console.log("Updated Total Price after coupon:", totalPrice);
      }
    });

  document
    .getElementById("placeOrderBtn")
    .addEventListener("click", async () => {
      const placeOrderBtn = document.getElementById("placeOrderBtn");
      placeOrderBtn.disabled = true;
      placeOrderBtn.innerText = "Processing Payment...";

      try {
        // Get selected address and payment method
        const couponCode = document.getElementById("couponCode").value;
        const selectedAddressElement = document.querySelector(
          'input[name="addressId"]:checked'
        );
        const paymentMethodElement = document.querySelector(
          'input[name="paymentMethod"]:checked'
        );
        const totalPriceElement = document.querySelector(
          ".total-price-section h2"
        ).innerText;
        const totalPrice = parseFloat(
          totalPriceElement.replace("Total Price: ₹", "").trim()
        );

        if (!selectedAddressElement) {
          await Swal.fire({
            icon: "warning",
            title: "No Address Selected",
            text: "Please select a delivery address.",
          });
          resetButton();
          return;
        }

        if (!paymentMethodElement) {
          await Swal.fire({
            icon: "warning",
            title: "No Payment Method Selected",
            text: "Please select a payment method.",
          });
          resetButton();
          return;
        }

        const selectedAddress = selectedAddressElement.value;
        const paymentMethod = paymentMethodElement.value;
        console.log("payment method selection from frondend",paymentMethod)

        // If payment method is COD, handle directly
        if (paymentMethod === "cod") {
          const response = await fetch("/checkout/place-order", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              addressId: selectedAddress,
              paymentMethod,
              totalPrice,
              couponCode,
            }),
          });

          const result = await response.json();

          if (response.ok && result.success) {
            await Swal.fire({
              icon: "success",
              title: "Order Placed Successfully",
              text: `Your order ID is ${result.orderId}.`,
              confirmButtonText: "OK",
            });
            window.location.href = "/place-order/success";
          } else {
            throw new Error(result.message || "Order failed.");
          }
          return;
        }
        const finalTotalPrice = totalPrice * 100; 
        console.log(finalTotalPrice, "Razor pay frontend rupeessss checking");
        // Handle Razorpay payment
        const orderResponse = await fetch("/checkout/place-order", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            amount: finalTotalPrice,
            addressId: selectedAddress,
            couponCode,
            paymentMethod
          }), // Convert to paise
        });

        const orderData = await orderResponse.json();

        if (!orderResponse.ok || !orderData.success) {
          throw new Error(
            orderData.message || "Failed to create Razorpay order."
          );
        }
        const options = {
          key: "rzp_test_9mPp5pnV20FqUT", 
          amount: orderData.order.amount,
          currency: "INR",
          name: "Luxora Stores",
          description: "Order Payment",
          image: "/path/to/your/logo.png",
          order_id: orderData.order.id,
          handler: async function (response) {
            console.log("Razorpay handler executed");
            const paymentResult = await fetch(
              "/checkout/verify-razorpay-payment",
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  addressId: selectedAddress,
                  razorpayOrderId: response.razorpay_order_id,
                  razorpayPaymentId: response.razorpay_payment_id,
                  razorpaySignature: response.razorpay_signature,
                }),
              }
            );

            const result = await paymentResult.json();
            console.log("Payment Result:", result);

            if (paymentResult.ok && result.success) {
              await Swal.fire({
                icon: "success",
                title: "Payment Successful",
                text: `Your order ID is ${result.orderId}.`,
                confirmButtonText: "OK",
              });
              console.log("Redirecting to success page");
              window.location.href = "/place-order/success";
            } else {
              throw new Error(result.message || "Payment verification failed.");
            }
          },
          prefill: {
            name: "Customer Name",
            email: "customer@example.com",
            contact: "9999999999",
          },
          theme: {
            color: "#3399cc",
          },
          modal:{
            ondismiss:function(){
              Swal.fire({
        icon: "info",
        title: "Payment Cancelled",
        text: "You closed the payment screen. Your order has not been created.",
      });
              // location.reload();
              resetButton();
            }
          }
        };

        const razorpay = new Razorpay(options);
        razorpay.open();
        razorpay.on("payment.failed", async function (response) {
          await Swal.fire({
            icon: "error",
            title: "Payment Failed",
            text:
              response.error.description || "Payment could not be completed.",
          });
          window.location.href="/place-order/failed"
          resetButton();
        });
      } catch (error) {
        console.error("Error placing order:", error);
        await Swal.fire({
          icon: "error",
          title: "Error",
          text: error.message || "Something went wrong. Please try again.",
        });
        resetButton();
      }

      function resetButton() {
        placeOrderBtn.disabled = false;
        placeOrderBtn.innerText = "Place Order";
      }
    });


    document.getElementById('addAddressForm').addEventListener('submit', function (e) {
    let isValid = true;

    // Reset all error messages
    document.querySelectorAll('.text-danger').forEach(el => el.textContent = '');

    // Validate Address Type
    const addresstype = document.getElementById('addresstype').value.trim();
    if (addresstype.length < 3) {
      document.getElementById('addresstypeError').textContent = 'Address type must be at least 3 characters.';
      isValid = false;
    }

    // Validate Name
    const name = document.getElementById('name').value.trim();
    if (name.length < 3) {
      document.getElementById('nameError').textContent = 'Name must be at least 3 characters.';
      isValid = false;
    }

    // Validate City
    const city = document.getElementById('city').value.trim();
    if (city.length < 2) {
      document.getElementById('cityError').textContent = 'City name is too short.';
      isValid = false;
    }

    // Validate Landmark
    const landmark = document.getElementById('landmark').value.trim();
    if (landmark.length < 3) {
      document.getElementById('landmarkError').textContent = 'Landmark must be at least 3 characters.';
      isValid = false;
    }

    // Validate State
    const state = document.getElementById('state').value.trim();
    if (state.length < 2) {
      document.getElementById('stateError').textContent = 'State name is too short.';
      isValid = false;
    }

    // Validate Pincode
    const pincode = document.getElementById('pincode').value.trim();
    if (!/^\d{6}$/.test(pincode)) {
      document.getElementById('pincodeError').textContent = 'Pincode must be exactly 6 digits.';
      isValid = false;
    }

    // Validate Phone
    const phone = document.getElementById('phone').value.trim();
    if (!/^\d{10}$/.test(phone)) {
      document.getElementById('phoneError').textContent = 'Phone number must be exactly 10 digits.';
      isValid = false;
    }

    // Validate Alternate Phone
    const altphone = document.getElementById('altphone').value.trim();
    if (altphone && !/^\d{10}$/.test(altphone)) {
      document.getElementById('altphoneError').textContent = 'Alternate phone number must be exactly 10 digits.';
      isValid = false;
    }

    // Prevent form submission if validation fails
    if (!isValid) {
      e.preventDefault();
    }
  });
</script>
