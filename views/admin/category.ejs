<%- include("../partials/admin/header.ejs") %>
  <style>
    .col-md-3 {
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 10px;
      margin: 10px;
    }

    .d-grid {
      margin-top: 20px;
    }

    .btn-primary {
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }

    .btn-primary:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }

    .pagination-container {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 8px;
  }

  .pagination-container .btn {
      padding: 8px 12px;
      font-size: 14px;
      border-radius: 4px;
      text-decoration: none;
  }

  .pagination-container .btn:hover {
      background-color: #007bff;
      color: white;
  }

  .btn-secondary {
      background-color: #32597a;
      color: white;

  }

    .error-message {
      color: red;
      font-size: 12px;
      margin-top: 5px;
    }

    .input-group {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-left: auto;
      margin-right: auto;
      width: 400px;
      background-color: #ffffff;
    }

    .input-group input {
      padding: 12px;
      border: none;
    }

    .input-group button {
      border-radius: 0 20px 20px 0;
      padding: 14px 21px;
      cursor: pointer;
      background-color: #007bff;
      color: white;
      border: 1px solid #007bff;
    }

    .input-group button:hover {
      background-color: #0056b3;
      border-color: #0056b3;
    }
  </style>
  <section class="content-main">
    <div class="content-header">
      <div>
        <h2 class="content-title card-title">Category</h2>
      </div>
    </div>
    <header class="card-header text-center mb-20">
      <form action="/admin/category/" method="get" class="d-inline w-100">
        <div class="input-group input-group-sm">
          <input
            type="text"
            class="form-control border rounded-start-pill"
            placeholder="Search categories"
            name="search"
            value="<%= searchQuery || '' %>"
          />
          <button
            class="btn btn-primary rounded-end-pill"
            type="submit"
            style="font-size: 1rem; margin-left: -1px;"
          >
            Search
          </button>
        </div>
      </form>
    </header>
    <div class="card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-3">
            <form
              method="post"
              action="/admin/addCategory"
              onsubmit="return handleFormSubmit(event)"
            >
              <div class="mb-4">
                <label for="product_name" class="form-label">Name</label>
                <input
                  type="text"
                  name="name"
                  placeholder="Type here"
                  class="form-control"
                  id="product_name"
                  required
                />
                <div id="name-error" class="error-message" style="color: red;"></div>
              </div>
              <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea
                  placeholder="Type here"
                  name="description"
                  class="form-control"
                  id="descriptionId"
                  required
                ></textarea>
                <div id="description-error" class="error-message" style="color: red;"></div>
              </div>
              <div class="d-grid">
                <button class="btn btn-primary" type="submit">
                  Create category
                </button>
              </div>
            </form>
          </div>
          <div class="col-md-8 ml-10">
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th class="text-center"></th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Offer percentage</th>
                    <th>Add/Remove Offer</th>
                    <th>Status</th>
                    <th>List/Unlist</th>
                    <th class="text-start">Edit</th>
                  </tr>
                </thead>
                <tbody>
                  <% cat.reverse().forEach((category, index) => { %>
                  <tr>
                    <td></td>
                    <td class="text-start"><%= category.name %></td>
                    <td class="text-start"><%= category.description %></td>
                    <td>
                      <%if(category.categoryOffer){%>
                        <%=category.categoryOffer%>%
                      <%}else{%>
                      0%
                      <%}%>
                    </td>
                    <td class="text-start">
                      <% if (category.categoryOffer > 0) { %>
                        <button class="btn btn-info text-white" style="width: 100px" onclick="removeOffer('<%=category._id%>')">Remove Offer</button>
                      <% } else { %>
                        <button class="btn btn-info text-white" style="width: 100px" onclick="addOffer('<%=category._id%>')">Add Offer</button>
                      <% } %>
                    </td>
                    <td class="text-start">
                      <%if(category.isListed){%>
                      <span
                        class="badge rounded-pill alert-success"
                        style="width: 60px"
                        >Listed</span
                      >
                      <%}else{%>
                      <span
                        class="badge rounded-pill alert-danger"
                        style="width: 60px"
                        >Unlisted</span
                      >
                      <%}%>
                    </td>
                    <td class="text-start">
                      <%if(category.isListed){%>
                      <button class="btn btn-success" style="width: 70px">
                        <a
                          href="/admin/listunlist?id=<%=category._id%>"
                          class="text-white"
                          >List</a
                        >
                      </button>
                      <%}else{%>
                      <button class="btn btn-danger" style="width: 70px">
                        <a
                          href="/admin/listunlist?id=<%=category._id%>"
                          class="text-white"
                          >Unlist</a
                        >
                      </button>
                      <%}%>
                    </td>
                    <td class="text-start">
                      <a href="/admin/editcategory?id=<%=category._id%>" class="btn btn-info text-white">Edit</a>
                    </td>
                  </tr>
                  <% }) %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="pagination-container text-center mt-4">
      <% if (currentPage > 1) { %>
        <a href="/admin/category?search=<%=searchQuery%>&page=<%= currentPage - 1 %>" class="btn btn-primary">« Previous</a>
      <% } %>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <a 
          href="/admin/category?search=<%=searchQuery%>&page=<%= i %>" 
          class="btn <%= currentPage === i ? 'btn-secondary' : 'btn-outline-primary' %> mx-1">
          <%= i %>
        </a>
      <% } %>
      <% if (currentPage < totalPages) { %>
        <a href="/admin/category?search=<%=searchQuery%>&page=<%= currentPage + 1 %>" class="btn btn-primary">Next »</a>
      <% } %>
      </div>
</section>
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.14.5/dist/sweetalert2.all.min.js"></script>

  <script>
  async function addOffer(categoryId){
      const {value:amount}=await Swal.fire({
        title:"Offer in percentage",
        input:"number",
        inputAttributes:{
        min:0,
        max:100,
        },
        inputLabel:"percentage(0-100)",
        inputPlaceholder:"%",
        showCancelButton:true,
        inputValidator:(value)=>{
          if(!value){
            return "you need to enter a percentage"
          }
          if(value<0||value>100)
            return "percentage must be between 0 and 100"
          else if(value==100){
            return "Cannot add exact 100 percentage"
          }
        }
      });

    if(amount){
      try {
        const response=await fetch("/admin/addCategoryOffer",{
          method:"POST",
          headers:{
            "content-type":"application/json",
          },
          body:JSON.stringify({
            percentage:amount,
            categoryId:categoryId,
          }),
        });

        const data=await response.json();

        if(response.ok && data.status===true){
            Swal.fire({
            title:"Offer Added",
            text:data.message,
            icon:"success",
          }).then((result)=>{
            if(result.isConfirmed){
              location.reload()
            }
          });
        }else{
          Swal.fire("Failed",data.message || "Adding offer failed","error")
        }
      } catch (error) {
        Swal.fire(
          "Error",
          "An error occurred",
          "error"
        );
        console.error("error adding offer ",error)
      }
    }
  }

  function removeOffer(categoryId) {
  Swal.fire({
    title: "Are you sure?",
    text: "You are about to remove the offer from this category!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonText: "Yes, remove it!",
    cancelButtonText: "Cancel",
    timer:5000,
    timerProgressBar:true,
  }).then((result) => {
    if (result.isConfirmed) {
      fetch("/admin/removeCategoryOffer", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ categoryId }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.status) {
            Swal.fire({
              title: "Success",
              text: "Category offer removed successfully.",
              icon: "success",
            }).then(() => {
              window.location.reload();
            });
          } else {
            Swal.fire({
              title: "Error",
              text: data.message || "Failed to remove category offer.",
              icon: "error",
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            title: "Error",
            text: "An error occurred while removing the offer.",
            icon: "error",
          });
        });
    }
  });
}

      function handleFormSubmit(event) {
    event.preventDefault();

    // Validate form before proceeding
    if (!validateForm()) {
        return;
    }

    const name = document.getElementsByName("name")[0].value;
    const description = document.getElementById("descriptionId").value;

    fetch("/admin/addCategory", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({ name, description }),
    })
        .then((response) => {
            // Handle errors gracefully
            if (!response.ok) {
                return response.json().then((err) => {
                    throw new Error(err.message || "Unknown error occurred");
                });
            }
            return response.json();
        })
        .then((data) => {
            console.log("Success response:", data);

            if (data.success) {
                Swal.fire({
                    icon: "success",
                    title: "Category Added Successfully",
                    text: data.message,
                    confirmButtonText: "OK",
                }).then(() => {
                    // Optionally, reload the page after the success message or redirect
                    location.reload(); // Reload the page to reflect the new category
                });
            } else {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: data.message || "An unknown error occurred.",
                });
            }
        })
        .catch((error) => {
            console.error("Error occurred:", error);

            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: error.message || "An error occurred while adding the category.",
            });
        });
}

    function validateForm(){
      let isValid=true

      const nameInput=document.getElementById("product_name")
      const descriptionInput=document.getElementById("descriptionId")

      const nameError=document.getElementById("name-error")
      const descriptionError=document.getElementById("description-error")
      nameError.textContent=""
      descriptionError.textContent=""
      if(!nameInput.value.trim()){
        nameError.textContent="Name is required";
        isValid=false;
      }
      else if(nameInput.value.length<3){
        nameError.textContent="Name must be atleast 3 Characters Long"
        isValid=false;
      }

      if (!descriptionInput.value.trim()) {
      descriptionError.textContent = "Description is required.";
      isValid = false;
    } else if (descriptionInput.value.length < 10) {
      descriptionError.textContent = "Description must be at least 10 characters long.";
      isValid = false;
    }

    return isValid;
    }

  </script>
<%-include("../partials/admin/footer.ejs")%>